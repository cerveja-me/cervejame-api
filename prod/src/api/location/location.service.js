'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.insertLocation=insertLocation;exports.findZone=findZone;exports.findLocationByID=findLocationByID;exports.updateLocation=updateLocation;exports.transformTime=transformTime;var _db=require('../../db/db');var _db2=_interopRequireDefault(_db);var _pgPromise=require('pg-promise');var _errorHandler=require('../../handlers/errorHandler');var _errorHandler2=_interopRequireDefault(_errorHandler);var _httpStatus=require('http-status');var _httpStatus2=_interopRequireDefault(_httpStatus);var _location=require('./location.query');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}async function insertLocation(idDevice,positionGps){try{const insertLocation=new _pgPromise.PreparedStatement('insert-location',_location.CREATE_LOCATION);insertLocation.values=[idDevice,positionGps];let location=await _db2.default.one(insertLocation);return location}catch(error){throw error}}async function findZone(location){try{const findZone=new _pgPromise.PreparedStatement('find-zone',_location.FIND_ZONE);findZone.values=[location.id];let zone=await _db2.default.one(findZone);return zone}catch(error){throw error}}async function findLocationByID(id){const findLocation=new _pgPromise.PreparedStatement('find-location-id',_location.FIND_LOCATION_BY_ID);findLocation.values=[id];try{let l=await _db2.default.one(findLocation);return l}catch(error){throw error}}async function updateLocation(location){const updateLocation=new _pgPromise.PreparedStatement('update-location',_location.UPDATE_LOCATION);updateLocation.values=[location.position_maps,location.street,location.num,location.complement,location.id];try{return await _db2.default.one(updateLocation)}catch(error){throw error}}function transformTime(zone,time){const base=new Date(time);const date=new Date(base.toString());date.setHours(0,0,0,0);date.setDate(date.getDate()-date.getDay());zone.open=false;zone.schedule=zone.schedule.map((sch,index)=>{sch.open=new Date(date.toString());sch.open=new Date(sch.open.setDate(sch.open.getDate()+index));sch.open=new Date(sch.open.setHours(sch.start.split(':')[0],sch.start.split(':')[1],0,0));sch.close=new Date(sch.open);sch.close.setHours(sch.close.getHours()+parseInt(sch.end));if(base.getTime()>sch.open.getTime()&&base.getTime()<sch.close.getTime()){sch.active=true;zone.open=true}else{sch.active=false}sch.day=base.getDay()===sch.open.getDay();return sch});return zone}